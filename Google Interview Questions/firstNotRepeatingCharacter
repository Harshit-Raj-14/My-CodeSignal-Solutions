/* USING HASHSET */
char solution(String s) {
    String temp = s;
    HashSet<Character> set = new HashSet<>();
    for(int i=0;i<s.length();i++){
        if(!set.contains(s.charAt(i))){
            set.add(s.charAt(i));
        }
        else{
            temp=temp.replace(""+s.charAt(i),"");
        }
    }
    if(temp.length()>0) return temp.charAt(0);
    else return '_';
}

Note  : We take a seperate string temp, becuase we don't want to change the main string and cause discrepancy
String.replace(char searchChar, char newChar)
So, doing something like this would give error - temp=temp.replace(s.charAt(i),"");



/* DYNAMIC PROGRAMMING */
char solution(String s) {
    int count[] = new int[26];
    for(int i=0;i<s.length();i++){
        int index = s.charAt(i) - 'a';
        count[index]++;
    }
    for(int i=0;i<s.length();i++){
        int index = s.charAt(i) - 'a';
        if(count[index]==1) return s.charAt(i);       //return (char)(index+'a');
    }
    return '_';
}

NOTE : Dont do the mistake of looping in the count array in the second loop, that will destory the order of sequence of characters that are in string



/* USING HASHMAP */
char solution(String s) {
    HashMap<Character,Integer> map = new HashMap<>();
    for(int i=0;i<s.length();i++){
        if(map.containsKey(s.charAt(i))){
            map.put(s.charAt(i),map.get(s.charAt(i))+1);
        }
        else map.put(s.charAt(i),1);
    }
    //check the count in map
    for(int i=0;i<s.length();i++){
        if(map.get(s.charAt(i))==1) return s.charAt(i);
    }
    return '_';
}

NOTE: can also do this
for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            map.put(c, count.getOrDefault(c, 0) + 1);
        }
