/* BRUTE FORCE */
int solution(int value1, int weight1, int value2, int weight2, int maxW) {
    int fv = 0;
    if(value1>=value2 && maxW>=weight1){
        fv+=value1;
        maxW-=weight1;
        if(maxW>=weight2){
            fv+=value2;
        }
    }
    else if(value2>=value1 && maxW>=weight2){ 
        fv+=value2;
        maxW-=weight2;
        if(maxW>=weight1) fv+=value1;
    }
    else if(maxW>=weight1) fv+=value1;
    else if(maxW>=weight2) fv+=value2; 
    return fv;
}

LOGIC --- differents paths written for all cases
I - first bag picked and still picks second bag 
II - second bag picked and still picks first bag
III - only can pick first bag
IV - only can pick second bag


/* SIMPLIFIED */
int solution(int value1, int weight1, int value2, int weight2, int maxW) {
    if(weight1 + weight2 <= maxW) return value1+value2;
    else if(weight2<=maxW && value1<=value2) return value2;
    else if(weight1<=maxW) return value1;
    return 0;
}

/* ELEGANT SOLUTION - LET'S BE GREEDY - Nested Math.max() */
int solution(int value1, int weight1, int value2, int weight2, int maxW) {
    return Math.max(
        Math.max((maxW>=weight1) ? value1 : 0, (maxW>=weight2) ? value2 : 0),
        (maxW>=weight1+weight2) ? value1+value2 : 0
        );
}

Link - https://app.codesignal.com/arcade/code-arcade/at-the-crossroads/r9azLYp2BDZPyzaG2/solutions
